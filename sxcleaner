#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
Retention management for SiLK data repository

'''

# Core modules
from __future__ import print_function
from argparse import ArgumentParser, ArgumentTypeError
from datetime import datetime, timedelta
from logging.handlers import SysLogHandler
import os
import re
import time
import fnmatch
import logging

# Third party modules
import psutil

# Metadata
__author__ = 'Tor Inge Skaar'
__license__ = 'MIT'
__version__ = '2'

# Settings
PROCNAME = 'rwflowpack'       # Name of running process
CONFNAME = 'rwflowpack.conf'  # Name of config file
LOCATION = ['/etc', '/usr']   # Possible locations for config file


def find_rootdir():
    '''Determine the root directory of SiLK data storage'''

    debug('Trying to determine root directory')
    debug('Checking running {} processes'.format(PROCNAME))
    for proc in psutil.process_iter():
        if proc.name == PROCNAME:
            debug('Found process: {} (PID: {})'.format(proc.name, proc.pid))
            cmdfile = '/proc/' + str(proc.pid) + '/cmdline'
            with open(cmdfile, 'r') as cmd:
                cmdlist = cmd.read().split('--')
                rootarg = fnmatch.filter(cmdlist, 'root-directory=*')[0]
                debug(rootarg)
                return rootarg.split('=')[1].rstrip('\0')

    debug('Checking {} for {}'.format(' '.join(LOCATION), CONFNAME))
    for loc in LOCATION:
        for root, dirs, files in os.walk(loc):
            for filename in fnmatch.filter(files, CONFNAME):
                conffile = os.path.join(root, filename)
                with open(conffile, 'r') as conf:
                    config = conf.readlines()
                    rootsetting = fnmatch.filter(config, 'DATA_ROOTDIR=*')[0]
                    debug(rootsetting)
                    return rootsetting.split('=')[1]

    # Configuration file not located
    return False


def arg_positive_int(value):
    '''Argument validation: positive integers only'''

    notpositive = 'Only positive integer values are accepted'
    notinteger = 'Not an integer value'
    try:
        intval = int(value)
        if intval < 0:
            raise ArgumentTypeError(notpositive)
    except ValueError:
        raise ArgumentTypeError(notinteger)

    return intval


def arg_time(value):
    '''Argument validation: timestamp format'''

    formaterror = 'Time limit not on format: YYYY-MM-DD (optional HH:mm:ss)'
    invalidtime = 'Invalid time limit specified'
    pattern = '^\d{4}-\d{2}-\d{2}( \d{2}:\d{2}:\d{2})?$'
    if not re.match(pattern, value):
        raise ArgumentTypeError(formaterror)
    try:
        datetime.strptime(value, '%Y-%m-%d')
    except ValueError:
        try:
            datetime.strptime(value, '%Y-%m-%d %H:%M:%S')
        except ValueError:
            raise ArgumentTypeError(invalidtime)

    return value


def debug(message):
    '''Output debug message only if verbose option is used'''

    prefix = '\033[95m[DEBUG]\033[0m'
    if DEBUG is True:
        print('{} {}'.format(prefix, message))


def err(message):
    '''Output error message'''
    if SILENT is False:
        prefix = '\033[91m[ERROR]\033[0m'
        print('{} {}'.format(prefix, message))


def warn(message):
    '''Output warning message'''

    if SILENT is False:
        prefix = '\033[93m[WARN]\033[0m '
        print('{} {}'.format(prefix, message))


def info(message):
    '''Output informational message'''

    if SILENT is False:
        prefix = '[INFO] '
        print('{} {}'.format(prefix, message))


def main():
    '''Main execution'''

    # Parse input arguments
    parser = ArgumentParser(description='Remove old SiLK data')
    group = parser.add_mutually_exclusive_group()
    outgroup = parser.add_mutually_exclusive_group()
    parser.add_argument('-r', metavar='PATH', dest='rootdir',
                        help='Root directory of SiLK data (DATA_ROOTDIR). \
                             If not specified, script will try to autodetect.')
    group.add_argument('-d', dest='days', type=arg_positive_int, metavar='NUM',
                       help='Delete data older than NUM days ago')
    group.add_argument('-t', dest='time', type=arg_time, metavar='TIME',
                       help='Delete all files older than timestamp: \
                             YYYY-MM-DD (HH:mm:ss)')
    parser.add_argument('-x', dest='dryrun', action='store_true',
                        help='Dry-run (does not remove any data)')
    outgroup.add_argument('-v', dest='verbose', action='store_true',
                          help='Verbose output (Debug)')
    outgroup.add_argument('-q', dest='silent', action='store_true',
                          help='Suppress all console output')
    args = parser.parse_args()

    # Set debug status
    global DEBUG
    DEBUG = args.verbose

    # Set quiet status
    global SILENT
    SILENT = args.silent

    # Log to local syslog
    logger = logging.getLogger(os.path.basename(__file__))
    logger.setLevel(logging.INFO)
    syslog = SysLogHandler(address='/dev/log')
    formatter = logging.Formatter('%(name)s: <%(levelname)s> - %(message)s')
    syslog.setFormatter(formatter)
    logger.addHandler(syslog)
    info('Enabled logging to syslog')

    # Set root directory
    if args.rootdir:
        rootdir = args.rootdir
    else:
        rootdir = find_rootdir()
        if rootdir is False:
            errmsg1 = 'Unable to determine SiLK data store (DATA_ROOTDIR)'
            errmsg2 = 'Please specify it manually with -r option'
            logger.critical(errmsg1)
            exit(errmsg1 + '\n' + errmsg2)
    info('SiLK Data Directory: {}'.format(rootdir))

    # Set retention time
    if args.days:
        time = datetime.now() - timedelta(days=args.days)
    elif args.time:
        try:
            time = datetime.strptime(args.time, '%Y-%m-%d')
        except ValueError:
            time = datetime.strptime(args.time, '%Y-%m-%d %H:%M:%S')
    else:
        err('No retention time defined (-d or -t)')
        exit(1)
    timestr = datetime.strftime(time, '%Y-%m-%d %H:%M:%S')
    infomsg = 'Retention limit: {}'.format(timestr)
    info(infomsg)
    if args.dryrun:
        info('Dry-run only (no data will be deleted)')
    else:
        logger.info(infomsg)

    # Locate files older than retention limit
    timelimit = (time - datetime(1970, 1, 1)).total_seconds()
    ftot = fdel = ferr = 0
    for root, dirs, files in os.walk(rootdir):
        for f in files:
            if re.match('^.+_\d{8}.\d{2}', f):
                ftot += 1
                filepath = os.path.join(root, f)
                if os.stat(filepath).st_mtime < timelimit:
                    try:
                        if not args.dryrun:
                            os.remove(filepath)
                        fdel += 1
                    except OSError:
                        warn('Unable to remove {}'.format(filepath))
                        ferr += 1
                    if not os.listdir(root):
                        info('Removing empty directory {}'.format(root))
                        if not args.dryrun:
                            os.rmdir(root)
    # Print summary
    if fdel > 0:
        msg = 'Removed {} data files (of {} totally)'.format(fdel, ftot)
        info(msg)
        if not args.dryrun:
            logger.info(msg)
    else:
        msg = 'No data files are older than specified retention'
        info(msg)
        if not args.dryrun:
            logger.info(msg)
    if ferr > 0:
        errmsg = 'Failed to remove {} data files'.format(ferr)
        warn(errmsg)
        if not args.dryrun:
            logger.error(errmsg)


if __name__ == '__main__':
    main()

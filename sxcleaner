#!/usr/bin/env python3
'''
Retention management for SiLK data repository

'''

# Core modules
import os
import re
import time
import fnmatch
import logging
import subprocess
from argparse import ArgumentParser, ArgumentTypeError
from datetime import datetime, timedelta
from logging.handlers import SysLogHandler

# Output constants [color code, status text]
O_INF = [94, 'INFO']
O_WRN = [93, 'WARN']
O_ERR = [91, 'ERROR']
O_DBG = [96, 'DEBUG']


def find_rootdir():
    '''Determine the root directory of SiLK data storage'''
    debug('Trying to determine root directory')
    data = subprocess.check_output('silk_config').decode('utf-8').splitlines()
    d = next((x.split()[1] for x in data if x.startswith('data-root')), False)
    return d


def arg_positive_int(value):
    '''Argument validation: positive integers only'''

    notpositive = 'Only positive integer values are accepted'
    notinteger = 'Not an integer value'
    try:
        intval = int(value)
        if intval < 0:
            raise ArgumentTypeError(notpositive)
    except ValueError:
        raise ArgumentTypeError(notinteger)

    return intval


def arg_time(value):
    '''Argument validation: timestamp format'''

    formaterror = 'Time limit not on format: YYYY-MM-DD (optional HH:mm:ss)'
    invalidtime = 'Invalid time limit specified'
    pattern = '^\d{4}-\d{2}-\d{2}( \d{2}:\d{2}:\d{2})?$'
    if not re.match(pattern, value):
        raise ArgumentTypeError(formaterror)
    try:
        datetime.strptime(value, '%Y-%m-%d')
    except ValueError:
        try:
            datetime.strptime(value, '%Y-%m-%d %H:%M:%S')
        except ValueError:
            raise ArgumentTypeError(invalidtime)

    return value


def debug(message):
    '''Output debug message only if verbose option is used'''

    if DEBUG is True:
        out(message, O_DBG)


def out(message, code=O_INF):
    '''Output error, warning or info message'''

    if SILENT is False:
        prefix = ''
        reset = '\033[0m'
        if COLOR is True:
            prefix = '\033[{}m'.format(code[0])
        level = '[{}]'.format(code[1])
        print(' {}{:^7}{} {}'.format(prefix, level, reset, message))


def main():
    '''Main execution'''

    # Parse input arguments
    parser = ArgumentParser(description='Delete old SiLK data')
    group = parser.add_mutually_exclusive_group()
    outgroup = parser.add_mutually_exclusive_group()
    parser.add_argument('-r', metavar='PATH', dest='rootdir',
                        help='Root directory of SiLK data (DATA_ROOTDIR). \
                             If not specified, script will try to autodetect.')
    group.add_argument('-d', dest='days', type=arg_positive_int, metavar='NUM',
                       help='Delete data older than NUM days ago')
    group.add_argument('-t', dest='time', type=arg_time, metavar='TIME',
                       help='Delete all files older than timestamp: \
                             YYYY-MM-DD (HH:mm:ss)')
    parser.add_argument('-x', dest='dryrun', action='store_true',
                        help='Dry-run (does not remove any data)')
    parser.add_argument('-m', dest='color', action='store_false',
                        help='Monochrome output (no colors)')
    outgroup.add_argument('-v', dest='verbose', action='store_true',
                          help='Verbose output (Debug)')
    outgroup.add_argument('-q', dest='silent', action='store_true',
                          help='Suppress all console output')
    args = parser.parse_args()

    # Declare global status variables
    global DEBUG, SILENT, COLOR
    DEBUG = args.verbose
    SILENT = args.silent
    COLOR = args.color

    # Log to local syslog
    logger = logging.getLogger(os.path.basename(__file__))
    logger.setLevel(logging.INFO)
    syslog = SysLogHandler(address='/dev/log')
    formatter = logging.Formatter('%(name)s: <%(levelname)s> - %(message)s')
    syslog.setFormatter(formatter)
    logger.addHandler(syslog)
    out('Enabled logging to syslog')

    # Set root directory
    if args.rootdir:
        rootdir = args.rootdir
    else:
        rootdir = find_rootdir()
        if rootdir is False:
            errmsg1 = 'Unable to determine SiLK data store (DATA_ROOTDIR)'
            errmsg2 = 'Please specify it manually with -r option'
            logger.critical(errmsg1)
            exit(errmsg1 + '\n' + errmsg2)
    out('SiLK Data Directory: {}'.format(rootdir))

    # Set retention time
    if args.days:
        limit = datetime.now() - timedelta(days=args.days)
    elif args.time:
        try:
            limit = datetime.strptime(args.time, '%Y-%m-%d')
        except ValueError:
            limit = datetime.strptime(args.time, '%Y-%m-%d %H:%M:%S')
    else:
        out('No retention time defined (-d or -t)', O_ERR)
        exit(1)
    timestr = datetime.strftime(limit, '%Y-%m-%d %H:%M:%S')
    infomsg = 'Retention upper limit: {}'.format(timestr)
    out(infomsg)
    if args.dryrun:
        out('Dry-run only (no data will be deleted)')
    else:
        logger.info(infomsg)

    # Locate files older than retention limit
    ftot = fdel = ferr = 0
    for root, dirs, files in os.walk(rootdir):
        for f in files:
            if re.match('^.+_\d{8}.\d{2}', f):
                ftot += 1
                filepath = os.path.join(root, f)
                if os.stat(filepath).st_mtime < limit.timestamp():
                    try:
                        if not args.dryrun:
                            debug('Delete: {}'.format(filepath))
                            os.remove(filepath)
                        else:
                            debug('Simulating delete: {}'.format(filepath))
                        fdel += 1
                    except OSError:
                        warn('Unable to remove {}'.format(filepath))
                        ferr += 1
                    if not os.listdir(root):
                        info('Removing empty directory {}'.format(root))
                        if not args.dryrun:
                            os.rmdir(root)
    # Print summary
    if fdel > 0:
        msg = 'Removed {} data files (of {} totally)'.format(fdel, ftot)
        out(msg)
        if not args.dryrun:
            logger.info(msg)
    else:
        msg = 'No data files are older than specified retention'
        out(msg)
        if not args.dryrun:
            logger.info(msg)
    if ferr > 0:
        errmsg = 'Failed to remove {} data files'.format(ferr)
        out(errmsg, O_WARN)
        if not args.dryrun:
            logger.error(errmsg)


if __name__ == '__main__':
    main()
